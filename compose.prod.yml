version: '3.8'

services:
    postgres:
        image: postgres:15-alpine
        env_file:
            - .db.env
        environment:
            POSTGRES_DB: ${DB_TABLE:-auth}
            POSTGRES_USER: ${DB_USER:-auth_user}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
            PGDATA: "/var/lib/postgresql/data/pgdata"
        volumes:
            - postgres:/var/lib/postgresql/data
        restart: unless-stopped
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-auth_user} -d ${DB_TABLE:-auth}"]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 30s
        deploy:
            resources:
                limits:
                    cpus: '1.0'
                    memory: 1G
                reservations:
                    cpus: '0.5'
                    memory: 512M

    redis:
        image: redis:7-alpine
        env_file:
            - .db.env
        restart: unless-stopped
        volumes:
            - redis_data:/data
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 30s
        deploy:
            resources:
                limits:
                    cpus: '0.5'
                    memory: 512M
                reservations:
                    cpus: '0.2'
                    memory: 256M

    auth_api:
      build:
        context: .
        dockerfile: Dockerfile
      ports:
          - "443:443"
      env_file:
          - .db.env
      environment:
        - REDIS_HOST=redis
        - REDIS_PORT=6379
        - REDIS_DB=${REDIS_DB:-0}
        - SECRET_KEY=${SECRET_KEY}
        - SSL_CERTFILE=/app/.ssl/cert.pem
        - SSL_KEYFILE=/app/.ssl/key.pem
        - LOG_LEVEL=${LOG_LEVEL:-INFO}
        - PYTHONUNBUFFERED=1
      volumes:
        - ./ssl:/app/.ssl:ro
      depends_on:
        postgres:
          condition: service_healthy
        redis:
          condition: service_healthy
      restart: unless-stopped
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
        interval: 30s
        timeout: 10s
        retries: 3
        start_period: 40s
      deploy:
        resources:
            limits:
                cpus: '2.0'
                memory: 2G
            reservations:
                cpus: '1.0'
                memory: 1G
        replicas: 2
        update_config:
            parallelism: 1
            delay: 10s
        rollback_config:
            parallelism: 1
            delay: 10s
        restart_policy:
            condition: on-failure
            delay: 5s
            max_attempts: 3
            window: 120s

volumes:
  postgres:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: auth-service-network
    driver: bridge